// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id
  name                 String
  email                String
  emailVerified        Boolean        @default(false)
  image                String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @default(now()) @updatedAt
  sessions             Session[]
  accounts             Account[]
  createdOrganizations Organization[] @relation("UserOrganizationsCreated")

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("waitlist")
}

model Organization {
  id          String                @id @default(cuid())
  name        String
  slug        String                @unique
  createdById String?
  createdBy   User?                 @relation("UserOrganizationsCreated", fields: [createdById], references: [id], onDelete: SetNull)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @default(now()) @updatedAt
  addresses   OrganizationAddress[]
  rooms       Room[]

  @@map("organization")
}

model OrganizationAddress {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  label          String?
  streetLine1    String
  streetLine2    String?
  city           String
  state          String?
  postalCode     String?
  country        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  rooms          Room[]

  @@index([organizationId])
  @@map("organization_address")
}

model Room {
  id             String               @id @default(cuid())
  organizationId String
  organization   Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  addressId      String?
  address        OrganizationAddress? @relation(fields: [addressId], references: [id], onDelete: SetNull)
  name           String
  description    String?
  floor          String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @default(now()) @updatedAt
  items          Item[]

  @@index([organizationId])
  @@index([addressId])
  @@map("room")
}

model Item {
  id             String    @id @default(cuid())
  roomId         String
  room           Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  name           String
  description    String?
  category       String?
  quantity       Int       @default(1)
  acquiredAt     DateTime?
  purchasePrice  Decimal?  @db.Decimal(12, 2)
  estimatedValue Decimal?  @db.Decimal(12, 2)
  currency       String    @default("USD")
  serialNumber   String?
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt

  @@index([roomId])
  @@map("item")
}
